'use client'

import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { X, ChevronDown } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'

interface ManualCompositionModalProps {
	isOpen: boolean
	onClose: () => void
	onCompositionReady: (compositionData: any) => void
}

export function ManualCompositionModal({ 
	isOpen, 
	onClose, 
	onCompositionReady 
}: ManualCompositionModalProps) {
	const [formData, setFormData] = useState({
		name: '',
		uid: '',
		linkToContentType: 'yes',
		selectedContentType: '',
		urlSlug: ''
	})

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault()
		onCompositionReady({
			name: formData.name,
			uid: formData.uid,
			urlSlug: formData.urlSlug,
			type: formData.linkToContentType === 'yes' ? 'template' : 'custom',
			linkedContentType: formData.linkToContentType === 'yes' ? formData.selectedContentType : null,
			pageType: 'manual',
			autoGenerated: false,
			creationInput: ''
		})
	}

	if (!isOpen) return null

	return (
		<div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
			<motion.div
				initial={{ opacity: 0, scale: 0.95, y: 20 }}
				animate={{ opacity: 1, scale: 1, y: 0 }}
				exit={{ opacity: 0, scale: 0.95, y: 20 }}
				className="bg-white rounded-lg shadow-2xl w-full max-w-lg mx-4"
			>
				{/* Header */}
				<div className="flex items-center justify-between p-6 border-b border-slate-200">
					<h2 className="text-xl font-semibold text-slate-800">
						Create New Composition
					</h2>
					<Button variant="ghost" size="sm" onClick={onClose}>
						<X className="w-4 h-4" />
					</Button>
				</div>

				{/* Form Content */}
				<form onSubmit={handleSubmit} className="p-6 space-y-6">
					{/* Name Field */}
					<div>
						<label className="block text-sm font-medium text-slate-700 mb-2">
							Name <span className="text-red-500">(required)</span>
						</label>
						<Input
							value={formData.name}
							onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
							placeholder="Enter a name for your composition"
							required
						/>
					</div>

					{/* Composition UID */}
					<div>
						<label className="block text-sm font-medium text-slate-700 mb-2">
							Composition UID <span className="text-red-500">(required)</span>
						</label>
						<Input
							value={formData.uid}
							onChange={(e) => setFormData(prev => ({ ...prev, uid: e.target.value }))}
							placeholder="Enter a unique ID for your composition"
							required
						/>
						<p className="text-xs text-slate-500 mt-1">
							A unique identifier auto-generated from the title, which you can customize. 
							This UID is used to reference the composition in your code or when fetching data.
						</p>
					</div>

					{/* Content Type Linking */}
					<div>
						<label className="block text-sm font-medium text-slate-700 mb-3">
							Do You Want to Link This Entry to an Existing Content Type? <span className="text-red-500">(required)</span>
						</label>
						
						{/* Yes Option */}
						<div className="space-y-3">
							<label className="flex items-start gap-3 cursor-pointer">
								<input
									type="radio"
									name="linkToContentType"
									value="yes"
									checked={formData.linkToContentType === 'yes'}
									onChange={(e) => setFormData(prev => ({ ...prev, linkToContentType: e.target.value }))}
									className="mt-1"
								/>
								<div>
									<div className="font-medium text-slate-800">Yes, link to a content type</div>
									<p className="text-sm text-slate-600">
										Creates a dynamic UI to render all entries from the selected Content Type consistently.
									</p>
								</div>
							</label>

							{/* Content Type Dropdown */}
							{formData.linkToContentType === 'yes' && (
								<div className="ml-6 relative">
									<select 
										value={formData.selectedContentType}
										onChange={(e) => setFormData(prev => ({ ...prev, selectedContentType: e.target.value }))}
										className="w-full p-3 border border-slate-300 rounded-md bg-white appearance-none pr-10"
										required
									>
										<option value="">Select a Content Type</option>
										<option value="author">Author</option>
										<option value="blog-post">Blog Post</option>
										<option value="product">Product</option>
										<option value="page">Page</option>
									</select>
									<ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400 pointer-events-none" />
								</div>
							)}

							{/* No Option */}
							<label className="flex items-start gap-3 cursor-pointer">
								<input
									type="radio"
									name="linkToContentType"
									value="no"
									checked={formData.linkToContentType === 'no'}
									onChange={(e) => setFormData(prev => ({ ...prev, linkToContentType: e.target.value }))}
									className="mt-1"
								/>
								<div>
									<div className="font-medium text-slate-800">No, create a custom layout</div>
									<p className="text-sm text-slate-600">
										Build a freeform layout from scratch. Add and manage linked entries manually as needed.
									</p>
								</div>
							</label>
						</div>
					</div>

					{/* URL Slug */}
					<div>
						<label className="block text-sm font-medium text-slate-700 mb-2">
							URL Slug
						</label>
						<Input
							value={formData.urlSlug}
							onChange={(e) => setFormData(prev => ({ ...prev, urlSlug: e.target.value }))}
							placeholder="Enter your URL slug"
						/>
						<p className="text-xs text-slate-500 mt-1">
							Define the URL structure for this composition. Use wildcards for dynamic routing (e.g., /blog/*).
						</p>
					</div>

					{/* Action Buttons */}
					<div className="flex gap-3 pt-4">
						<Button type="button" variant="outline" onClick={onClose} className="flex-1">
							Cancel
						</Button>
						<Button 
							type="submit" 
							className="flex-1 bg-blue-600 hover:bg-blue-700"
							disabled={!formData.name || !formData.uid || (formData.linkToContentType === 'yes' && !formData.selectedContentType)}
						>
							Create
						</Button>
					</div>
				</form>
			</motion.div>
		</div>
	)
}
