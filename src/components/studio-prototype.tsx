'use client'

import React, { useState, useEffect, useRef } from 'react'
import { ErrorBoundary } from './error-boundary'
import { PageComponent } from '@/types'
import { generateId } from '@/lib/utils'
import { StudioHeader } from '@/components/composable-studio/studio-header'
import { LeftPanel } from '@/components/composable-studio/left-panel'
import { StudioCanvas } from '@/components/composable-studio/studio-canvas'
import { PropertiesPanel } from '@/components/composable-studio/properties-panel'
import { CompositionsPage } from '@/components/compositions/compositions-page'
import { ComponentContextProvider, useComponentContext } from './composable-studio/component-context'
import { GhostModeProvider } from '@/contexts/ghost-mode-context'

type ViewMode = 'compositions' | 'canvas'

export function StudioPrototype() {
	const [viewMode, setViewMode] = useState<ViewMode>('compositions')
	const [currentComposition, setCurrentComposition] = useState<any>(null)
	const [pageComponents, setPageComponents] = useState<PageComponent[]>([])
	const [currentThought, setCurrentThought] = useState<string>()
	const [selectedComponent, setSelectedComponent] = useState<PageComponent | null>(null)
	const [leftPanelActiveTab, setLeftPanelActiveTab] = useState<'components' | 'layers' | 'compose'>('compose')
	const [previewMode, setPreviewMode] = useState<{
		active: boolean
		targetComponentId: string | null
		changes: Record<string, any>
	}>({
		active: false,
		targetComponentId: null,
		changes: {}
	})

	const handlePageComponentAdd = (componentType: string, data: any) => {
		const newComponent: PageComponent = {
			id: generateId(),
			type: componentType as any,
			data,
			position: { x: 0, y: pageComponents.length * 100 },
			visible: true
		}

		setPageComponents(prev => [...prev, newComponent])
	}

	const handleShowThought = (thought: string) => {
		setCurrentThought(thought)
		// Clear the thought after a delay
		setTimeout(() => {
			setCurrentThought(undefined)
		}, 2000)
	}

	const handleComponentSelect = (component: PageComponent | null) => {
		setSelectedComponent(component)
	}

	const handlePreviewModeChange = (isPreviewMode: boolean, targetComponentId?: string, changes?: Record<string, any>) => {
		setPreviewMode(prev => ({
			active: isPreviewMode,
			targetComponentId: targetComponentId || null,
			changes: changes || (isPreviewMode ? prev.changes : {})
		}))
	}

	const handleNavigateToCanvas = (compositionData: any) => {
		setCurrentComposition(compositionData)
		setViewMode('canvas')
		
		// Auto-activate Compose tab for AI-generated or freeform compositions
		if (compositionData.autoGenerated || compositionData.pageType === 'freeform' || compositionData.creationInput) {
			setLeftPanelActiveTab('compose')
		}
		
		// Handle different page types with appropriate canvas setup
		if (compositionData.pageType === 'template' && compositionData.isDynamic) {
			// DYNAMIC TEMPLATE: Use preview entry to show template layout
			setPageComponents([]) // Start with empty canvas
			setCurrentThought(`Setting up template for all ${compositionData.contentType} entries...`)
			
			setTimeout(() => {
				setCurrentThought(`Using '${compositionData.previewEntry}' to preview template...`)
				setTimeout(() => {
					setCurrentThought('Building template layout...')
					setTimeout(() => {
						const mockComponents = createMockComponents(compositionData)
						setPageComponents(mockComponents)
						setCurrentThought(undefined) // Clear thought
					}, 800)
				}, 800)
			}, 1000)
		} else if (compositionData.pageType === 'one-off' && compositionData.autoGenerated) {
			// ONE-OFF PAGE WITH SPECIFIC ENTRY: Pre-populate with entry data
			setPageComponents([]) // Start with empty canvas
			setCurrentThought(`Building page for '${compositionData.specificEntry}'...`)
			
			setTimeout(() => {
				setCurrentThought('Loading entry data...')
				setTimeout(() => {
					setCurrentThought('Generating page layout...')
					setTimeout(() => {
						const mockComponents = createMockComponents(compositionData)
						setPageComponents(mockComponents)
						setCurrentThought(undefined) // Clear thought
					}, 800)
				}, 600)
			}, 1000)
		} else if (compositionData.pageType === 'freeform') {
			// FREEFORM PAGE: Generate smart draft components based on creation input
			setPageComponents([]) // Start fresh
			
			if (compositionData.creationInput && compositionData.creationInput.trim()) {
				setCurrentThought('Creating smart draft based on your input...')
				
				setTimeout(() => {
					const draftComponents = generateSmartDraftComponents(compositionData)
					setPageComponents(draftComponents)
					setCurrentThought(undefined)
				}, 1500)
			} else {
				setCurrentThought(undefined) // No loading for empty input
			}
		} else if (compositionData.autoGenerated) {
			// LEGACY: Old auto-generated pages
			setPageComponents([])
			setCurrentThought('Building your page with AI-generated content...')
			
			setTimeout(() => {
				setCurrentThought('Adding hero section...')
				setTimeout(() => {
					setCurrentThought('Configuring features...')
					setTimeout(() => {
						setCurrentThought('Finalizing layout...')
						setTimeout(() => {
							const mockComponents = createMockComponents(compositionData)
							setPageComponents(mockComponents)
							setCurrentThought(undefined)
						}, 800)
					}, 600)
				}, 800)
			}, 1000)
		} else {
			// MANUAL OR OTHER: Standard empty canvas
			setPageComponents([]) // Start with empty canvas
			setCurrentThought(undefined)
		}
	}

	const createMockComponents = (compositionData: any): PageComponent[] => {
		const components: PageComponent[] = []
		
		// Determine the content source based on page type
		let contentSource: string
		let features: string[]
		
		if (compositionData.pageType === 'template' && compositionData.previewEntry) {
			// TEMPLATE: Use preview entry for content
			contentSource = compositionData.previewEntry
			features = getDefaultFeaturesForEntry(compositionData.previewEntry)
		} else if (compositionData.pageType === 'one-off' && compositionData.specificEntry) {
			// ONE-OFF: Use specific entry for content
			contentSource = compositionData.specificEntry
			features = getDefaultFeaturesForEntry(compositionData.specificEntry)
		} else {
			// FALLBACK: Use composition name or features
			contentSource = compositionData.name || 'Premium Product'
			features = compositionData.features || [
				'Premium quality materials',
				'User-friendly design',
				'Advanced technology',
				'Excellent performance'
			]
		}
		
		// Extract the core product name for the title
		const cleanProductName = contentSource.replace(/ Landing Page$/, '').replace(/ Template$/, '')

		// Generate dynamic content based on product type
		const isHeadphones = cleanProductName.toLowerCase().includes('headphones') || 
		                    features.some((f: string) => f.toLowerCase().includes('audio') || f.toLowerCase().includes('noise'))
		
		const heroData = isHeadphones ? {
			title: cleanProductName,
			subtitle: 'Experience music like never before',
			description: 'Revolutionary audio technology meets premium comfort in our latest breakthrough headphones. Designed for audiophiles and everyday listeners alike.',
			image: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&h=600&fit=crop&crop=center'
		} : {
			title: cleanProductName,
			subtitle: 'Innovation meets excellence',
			description: 'Discover the perfect blend of cutting-edge technology and premium design. Built for those who demand the very best.',
			image: 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=600&fit=crop&crop=center'
		}

		// Hero Component
		components.push({
			id: generateId(),
			type: 'hero',
			data: heroData,
			position: { x: 0, y: 0 },
			visible: true
		})

		// Features Component with dynamic title
		const featuresTitle = isHeadphones ? 
			`Why Choose ${cleanProductName}?` : 
			`Why Choose ${cleanProductName}?`

		components.push({
			id: generateId(),
			type: 'features',
			data: {
				title: featuresTitle,
				features: features,
				layout: 'list'
			},
			position: { x: 0, y: 100 },
			visible: true
		})

		// CTA Component with dynamic content
		const ctaData = isHeadphones ? {
			title: 'Ready to Experience Premium Audio?',
			description: 'Join thousands of satisfied customers who have upgraded their listening experience.',
			text: 'Order Now - $299',
			variant: 'default',
			href: '#order'
		} : {
			title: 'Ready to Get Started?',
			description: 'Join thousands of satisfied customers who trust our premium products.',
			text: 'Learn More',
			variant: 'default',
			href: '#learn-more'
		}

		components.push({
			id: generateId(),
			type: 'cta',
			data: ctaData,
			position: { x: 0, y: 200 },
			visible: true
		})

		return components
	}

	// Generate smart draft components based on creation input
	const generateSmartDraftComponents = (compositionData: any): PageComponent[] => {
		const components: PageComponent[] = []
		const input = (compositionData.creationInput || '').toLowerCase()
		const name = compositionData.name || 'New Page'
		
		// Analyze input for page type detection
		const isLandingPage = input.includes('landing') || input.includes('product') || input.includes('launch')
		const isBlogPost = input.includes('blog') || input.includes('article') || input.includes('post')
		const isPortfolio = input.includes('portfolio') || input.includes('showcase') || input.includes('work')
		const isAboutPage = input.includes('about') || input.includes('team') || input.includes('company')
		
		if (isLandingPage) {
			// Landing page components
			components.push({
				id: generateId(),
				type: 'two-column-hero',
				data: {
					title: name.replace(' Landing Page', ''),
					description: 'Compelling value proposition for your product or service. This section captures attention and clearly communicates your main benefit.',
					image: '',
					buttonText: 'Get Started',
					buttonHref: '#',
					layout: 'image-left'
				},
				position: { x: 0, y: 0 },
				visible: true
			})
			
			components.push({
				id: generateId(),
				type: 'features',
				data: {
					title: 'Key Features',
					features: [
						'Feature 1: Highlight your main benefit',
						'Feature 2: Show your competitive advantage',
						'Feature 3: Demonstrate value to customers'
					],
					layout: 'list'
				},
				position: { x: 0, y: 100 },
				visible: true
			})
			
			components.push({
				id: generateId(),
				type: 'cta',
				data: {
					text: 'Start Your Journey Today',
					href: '#',
					variant: 'default',
					title: 'Ready to get started?',
					description: 'Join thousands of satisfied customers who have already made the switch.'
				},
				position: { x: 0, y: 200 },
				visible: true
			})
		} else if (isBlogPost) {
			// Blog post components  
			components.push({
				id: generateId(),
				type: 'hero',
				data: {
					title: name,
					subtitle: 'Published on ' + new Date().toLocaleDateString(),
					description: 'This is where your article introduction goes. Hook your readers with an engaging opening that sets the stage for your content.',
					image: ''
				},
				position: { x: 0, y: 0 },
				visible: true
			})
		} else if (isPortfolio) {
			// Portfolio components
			components.push({
				id: generateId(),
				type: 'two-column-hero',
				data: {
					title: 'My Portfolio',
					description: 'Showcasing my work and creative projects. Each piece represents my passion for design and innovation.',
					image: '',
					buttonText: 'View Projects',
					buttonHref: '#',
					layout: 'image-right'
				},
				position: { x: 0, y: 0 },
				visible: true
			})
		} else if (isAboutPage) {
			// About page components
			components.push({
				id: generateId(),
				type: 'hero',
				data: {
					title: 'About Us',
					subtitle: 'Our Story',
					description: 'Learn about our journey, values, and the team that makes it all possible.',
					image: ''
				},
				position: { x: 0, y: 0 },
				visible: true
			})
		} else {
			// Generic page - basic hero
			components.push({
				id: generateId(),
				type: 'hero',
				data: {
					title: name,
					subtitle: 'Welcome',
					description: 'This is your page description. Customize it to fit your content and purpose.',
					image: ''
				},
				position: { x: 0, y: 0 },
				visible: true
			})
		}
		
		return components
	}

	// Generate appropriate features based on entry name
	const getDefaultFeaturesForEntry = (entryName: string): string[] => {
		const lowerName = entryName.toLowerCase()
		
		if (lowerName.includes('headphones') || lowerName.includes('aura')) {
			return [
				'Premium noise cancellation technology',
				'24-hour battery life with quick charge',
				'Crystal-clear audio with deep bass',
				'Comfortable over-ear design',
				'Wireless Bluetooth 5.0 connectivity'
			]
		} else if (lowerName.includes('iphone') || lowerName.includes('phone')) {
			return [
				'Advanced camera system',
				'All-day battery life',
				'Premium display technology',
				'Fast and secure performance',
				'5G connectivity'
			]
		} else if (lowerName.includes('macbook') || lowerName.includes('laptop')) {
			return [
				'High-performance processor',
				'Stunning Retina display',
				'All-day battery life',
				'Premium aluminum design',
				'Advanced security features'
			]
		} else if (lowerName.includes('airpods')) {
			return [
				'Active noise cancellation',
				'Spatial audio experience',
				'Seamless device switching',
				'Long-lasting battery',
				'Wireless charging case'
			]
		} else if (lowerName.includes('blog') || lowerName.includes('guide') || lowerName.includes('practices')) {
			return [
				'Expert insights and tips',
				'Step-by-step instructions',
				'Real-world examples',
				'Best practices guide',
				'Actionable recommendations'
			]
		} else if (lowerName.includes('john') || lowerName.includes('sarah') || lowerName.includes('michael')) {
			return [
				'Years of industry experience',
				'Expert knowledge and skills',
				'Proven track record',
				'Strong leadership abilities',
				'Collaborative team player'
			]
		} else {
			// Generic fallback features
			return [
				'Premium quality materials',
				'User-friendly design',
				'Advanced technology',
				'Excellent performance',
				'Outstanding customer support'
			]
		}
	}

	const handleBackToCompositions = () => {
		setViewMode('compositions')
		setCurrentComposition(null)
		setPageComponents([])
		setSelectedComponent(null)
	}


	if (viewMode === 'compositions') {
		// Wrap CompositionsPage in error boundary to handle potential issues
		try {
			return (
				<React.Suspense fallback={
					<div className="min-h-screen bg-slate-50 flex items-center justify-center">
						<div className="text-center">
							<div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
							<p className="text-slate-600">Loading compositions...</p>
						</div>
					</div>
				}>
					<CompositionsPage onNavigateToCanvas={handleNavigateToCanvas} />
				</React.Suspense>
			)
		} catch (error) {
			console.error('Error loading CompositionsPage:', error)
			// Fallback UI
			return (
				<div className="min-h-screen bg-slate-50">
					<div className="p-8">
						<div className="bg-white rounded-lg border border-red-200 p-6">
							<h2 className="text-xl font-semibold text-red-600 mb-4">Loading Error</h2>
							<p className="text-slate-600 mb-4">There was an issue loading the compositions page. You can still create a new composition:</p>
							<button
								onClick={() => {
									handleNavigateToCanvas({
										name: 'New Landing Page',
										pageType: 'freeform',
										creationInput: 'Create a new landing page'
									})
								}}
								className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
							>
								Create New Page
							</button>
						</div>
					</div>
				</div>
			)
		}
	}

	const handleComponentUpdate = (componentId: string, updates: Partial<PageComponent>) => {
		setPageComponents(prev => 
			prev.map(component => 
				component.id === componentId 
					? { ...component, ...updates }
					: component
			)
		)
	}

	return (
		<ErrorBoundary>
			<ComponentContextProvider initialComponents={pageComponents}>
				<GhostModeProvider onComponentUpdate={handleComponentUpdate}>
					<StudioContent
						viewMode={viewMode}
						currentComposition={currentComposition}
						pageComponents={pageComponents}
						selectedComponent={selectedComponent}
						currentThought={currentThought}
						leftPanelActiveTab={leftPanelActiveTab}
						previewMode={previewMode}
						onBackToCompositions={handleBackToCompositions}
						onPageComponentAdd={handlePageComponentAdd}
						onShowThought={handleShowThought}
						onComponentSelect={handleComponentSelect}
						onPreviewModeChange={handlePreviewModeChange}
					/>
				</GhostModeProvider>
			</ComponentContextProvider>
		</ErrorBoundary>
	)
}

// Bridge component to sync external state with context
interface StudioContentProps {
	viewMode: ViewMode
	currentComposition: any
	pageComponents: PageComponent[]
	selectedComponent: PageComponent | null
	currentThought: string | undefined
	leftPanelActiveTab: any
	previewMode: {
		active: boolean
		targetComponentId: string | null
		changes: Record<string, any>
	}
	onBackToCompositions: () => void
	onPageComponentAdd: (componentType: string, data: any) => void
	onShowThought: (thought: string) => void
	onComponentSelect: (component: PageComponent | null) => void
	onPreviewModeChange: (isPreviewMode: boolean, targetComponentId?: string, changes?: Record<string, any>) => void
}

function StudioContent({
	viewMode,
	currentComposition,
	pageComponents,
	selectedComponent,
	currentThought,
	leftPanelActiveTab,
	previewMode,
	onBackToCompositions,
	onPageComponentAdd,
	onShowThought,
	onComponentSelect,
	onPreviewModeChange
}: StudioContentProps) {
	const { context, actions } = useComponentContext()
	const syncedRef = useRef(false)


	// Sync external state with context provider
	useEffect(() => {
		// Update all components in context
		actions.updateAllComponents(pageComponents)
	}, [pageComponents])

	useEffect(() => {
		// Sync selected component
		if (selectedComponent?.id !== context.selectedComponentId) {
			actions.selectComponent(selectedComponent?.id || null)
		}
	}, [selectedComponent])

	// Sync context changes back to external state (for other components that depend on it)
	useEffect(() => {
		if (context.selectedComponent && context.selectedComponent !== selectedComponent) {
			onComponentSelect(context.selectedComponent)
		}
	}, [context.selectedComponent])

	return (
		<div className="h-screen flex flex-col bg-slate-50">
			{/* Header */}
			<StudioHeader 
				onBackToCompositions={onBackToCompositions}
				currentComposition={currentComposition}
			/>

			{/* Main Content */}
			<div className="flex-1 flex min-h-0 relative">
				{/* Left Panel with tabs (Components, Layers, Compose) */}
				<LeftPanel 
					onPageComponentAdd={onPageComponentAdd}
					onShowThought={onShowThought}
					currentComposition={currentComposition}
					hasComponents={pageComponents.length > 0}
					defaultActiveTab={leftPanelActiveTab}
					onPreviewModeChange={onPreviewModeChange}
				/>

				{/* Canvas - Center */}
				<StudioCanvas 
					components={pageComponents}
					onComponentSelect={onComponentSelect}
					selectedComponent={selectedComponent}
					currentThought={currentThought}
					currentComposition={currentComposition}
					previewMode={previewMode}
				/>

				{/* Properties Panel - Right Sidebar */}
				<PropertiesPanel selectedComponent={selectedComponent} />

			</div>
		</div>
	)
}
